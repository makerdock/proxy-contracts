/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BytesLike,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  Token,
  TokenInterface,
} from "../../../contracts/ProxypadDeployer.sol/Token";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
      {
        internalType: "string",
        name: "_symbol",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "_maxSupply",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "_rootHash",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "allowance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientAllowance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientBalance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "approver",
        type: "address",
      },
    ],
    name: "ERC20InvalidApprover",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
    ],
    name: "ERC20InvalidReceiver",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSender",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSpender",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_claimAmount",
        type: "uint256",
      },
      {
        internalType: "bytes32[]",
        name: "proof",
        type: "bytes32[]",
      },
    ],
    name: "claimTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "isClaimed",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051611dcc380380611dcc83398181016040528101906100329190610504565b8383816003908161004391906107ba565b50806004908161005391906107ba565b505050610066338361007660201b60201c565b80600581905550505050506109ac565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036100e85760006040517fec442f050000000000000000000000000000000000000000000000000000000081526004016100df91906108cd565b60405180910390fd5b6100fa600083836100fe60201b60201c565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036101505780600260008282546101449190610917565b92505081905550610223565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818110156101dc578381836040517fe450d38c0000000000000000000000000000000000000000000000000000000081526004016101d39392919061095a565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361026c57806002600082825403925050819055506102b9565b806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516103169190610991565b60405180910390a3505050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61038a82610341565b810181811067ffffffffffffffff821117156103a9576103a8610352565b5b80604052505050565b60006103bc610323565b90506103c88282610381565b919050565b600067ffffffffffffffff8211156103e8576103e7610352565b5b6103f182610341565b9050602081019050919050565b60005b8381101561041c578082015181840152602081019050610401565b60008484015250505050565b600061043b610436846103cd565b6103b2565b9050828152602081018484840111156104575761045661033c565b5b6104628482856103fe565b509392505050565b600082601f83011261047f5761047e610337565b5b815161048f848260208601610428565b91505092915050565b6000819050919050565b6104ab81610498565b81146104b657600080fd5b50565b6000815190506104c8816104a2565b92915050565b6000819050919050565b6104e1816104ce565b81146104ec57600080fd5b50565b6000815190506104fe816104d8565b92915050565b6000806000806080858703121561051e5761051d61032d565b5b600085015167ffffffffffffffff81111561053c5761053b610332565b5b6105488782880161046a565b945050602085015167ffffffffffffffff81111561056957610568610332565b5b6105758782880161046a565b9350506040610586878288016104b9565b9250506060610597878288016104ef565b91505092959194509250565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806105f557607f821691505b602082108103610608576106076105ae565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026106707fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610633565b61067a8683610633565b95508019841693508086168417925050509392505050565b6000819050919050565b60006106b76106b26106ad84610498565b610692565b610498565b9050919050565b6000819050919050565b6106d18361069c565b6106e56106dd826106be565b848454610640565b825550505050565b600090565b6106fa6106ed565b6107058184846106c8565b505050565b5b818110156107295761071e6000826106f2565b60018101905061070b565b5050565b601f82111561076e5761073f8161060e565b61074884610623565b81016020851015610757578190505b61076b61076385610623565b83018261070a565b50505b505050565b600082821c905092915050565b600061079160001984600802610773565b1980831691505092915050565b60006107aa8383610780565b9150826002028217905092915050565b6107c3826105a3565b67ffffffffffffffff8111156107dc576107db610352565b5b6107e682546105dd565b6107f182828561072d565b600060209050601f8311600181146108245760008415610812578287015190505b61081c858261079e565b865550610884565b601f1984166108328661060e565b60005b8281101561085a57848901518255600182019150602085019450602081019050610835565b868310156108775784890151610873601f891682610780565b8355505b6001600288020188555050505b505050505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006108b78261088c565b9050919050565b6108c7816108ac565b82525050565b60006020820190506108e260008301846108be565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061092282610498565b915061092d83610498565b9250828201905080821115610945576109446108e8565b5b92915050565b61095481610498565b82525050565b600060608201905061096f60008301866108be565b61097c602083018561094b565b610989604083018461094b565b949350505050565b60006020820190506109a6600083018461094b565b92915050565b611411806109bb6000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c806370a082311161007157806370a08231146101685780638cc080251461019857806395d89b41146101c85780639a114cb2146101e6578063a9059cbb14610202578063dd62ed3e14610232576100a9565b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100fc57806323b872dd1461011a578063313ce5671461014a575b600080fd5b6100b6610262565b6040516100c39190610dcc565b60405180910390f35b6100e660048036038101906100e19190610e8c565b6102f4565b6040516100f39190610ee7565b60405180910390f35b610104610317565b6040516101119190610f11565b60405180910390f35b610134600480360381019061012f9190610f2c565b610321565b6040516101419190610ee7565b60405180910390f35b610152610350565b60405161015f9190610f9b565b60405180910390f35b610182600480360381019061017d9190610fb6565b610359565b60405161018f9190610f11565b60405180910390f35b6101b260048036038101906101ad9190610fb6565b6103a1565b6040516101bf9190610ee7565b60405180910390f35b6101d06103c1565b6040516101dd9190610dcc565b60405180910390f35b61020060048036038101906101fb9190611048565b610453565b005b61021c60048036038101906102179190610e8c565b61064b565b6040516102299190610ee7565b60405180910390f35b61024c600480360381019061024791906110a8565b61066e565b6040516102599190610f11565b60405180910390f35b60606003805461027190611117565b80601f016020809104026020016040519081016040528092919081815260200182805461029d90611117565b80156102ea5780601f106102bf576101008083540402835291602001916102ea565b820191906000526020600020905b8154815290600101906020018083116102cd57829003601f168201915b5050505050905090565b6000806102ff6106f5565b905061030c8185856106fd565b600191505092915050565b6000600254905090565b60008061032c6106f5565b905061033985828561070f565b6103448585856107a3565b60019150509392505050565b60006006905090565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60066020528060005260406000206000915054906101000a900460ff1681565b6060600480546103d090611117565b80601f01602080910402602001604051908101604052809291908181526020018280546103fc90611117565b80156104495780601f1061041e57610100808354040283529160200191610449565b820191906000526020600020905b81548152906001019060200180831161042c57829003601f168201915b5050505050905090565b60011515600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515036104e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104dd90611194565b60405180910390fd5b600033846040516020016104fb9291906111c3565b604051602081830303815290604052805190602001206040516020016105219190611217565b604051602081830303815290604052805190602001209050610587838380806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505060055483610897565b6105c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105bd9061127e565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33866040518363ffffffff1660e01b81526004016106019291906111c3565b6020604051808303816000875af1158015610620573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064491906112ca565b5050505050565b6000806106566106f5565b90506106638185856107a3565b600191505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b61070a83838360016108ae565b505050565b600061071b848461066e565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811461079d578181101561078d578281836040517ffb8f41b2000000000000000000000000000000000000000000000000000000008152600401610784939291906112f7565b60405180910390fd5b61079c848484840360006108ae565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036108155760006040517f96c6fd1e00000000000000000000000000000000000000000000000000000000815260040161080c919061132e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036108875760006040517fec442f0500000000000000000000000000000000000000000000000000000000815260040161087e919061132e565b60405180910390fd5b610892838383610a85565b505050565b6000826108a48584610caa565b1490509392505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036109205760006040517fe602df05000000000000000000000000000000000000000000000000000000008152600401610917919061132e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036109925760006040517f94280d62000000000000000000000000000000000000000000000000000000008152600401610989919061132e565b60405180910390fd5b81600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508015610a7f578273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92584604051610a769190610f11565b60405180910390a35b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610ad7578060026000828254610acb9190611378565b92505081905550610baa565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610b63578381836040517fe450d38c000000000000000000000000000000000000000000000000000000008152600401610b5a939291906112f7565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610bf35780600260008282540392505081905550610c40565b806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610c9d9190610f11565b60405180910390a3505050565b60008082905060005b8451811015610cef57610ce082868381518110610cd357610cd26113ac565b5b6020026020010151610cfa565b91508080600101915050610cb3565b508091505092915050565b6000818310610d1257610d0d8284610d25565b610d1d565b610d1c8383610d25565b5b905092915050565b600082600052816020526040600020905092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610d76578082015181840152602081019050610d5b565b60008484015250505050565b6000601f19601f8301169050919050565b6000610d9e82610d3c565b610da88185610d47565b9350610db8818560208601610d58565b610dc181610d82565b840191505092915050565b60006020820190508181036000830152610de68184610d93565b905092915050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610e2382610df8565b9050919050565b610e3381610e18565b8114610e3e57600080fd5b50565b600081359050610e5081610e2a565b92915050565b6000819050919050565b610e6981610e56565b8114610e7457600080fd5b50565b600081359050610e8681610e60565b92915050565b60008060408385031215610ea357610ea2610dee565b5b6000610eb185828601610e41565b9250506020610ec285828601610e77565b9150509250929050565b60008115159050919050565b610ee181610ecc565b82525050565b6000602082019050610efc6000830184610ed8565b92915050565b610f0b81610e56565b82525050565b6000602082019050610f266000830184610f02565b92915050565b600080600060608486031215610f4557610f44610dee565b5b6000610f5386828701610e41565b9350506020610f6486828701610e41565b9250506040610f7586828701610e77565b9150509250925092565b600060ff82169050919050565b610f9581610f7f565b82525050565b6000602082019050610fb06000830184610f8c565b92915050565b600060208284031215610fcc57610fcb610dee565b5b6000610fda84828501610e41565b91505092915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261100857611007610fe3565b5b8235905067ffffffffffffffff81111561102557611024610fe8565b5b60208301915083602082028301111561104157611040610fed565b5b9250929050565b60008060006040848603121561106157611060610dee565b5b600061106f86828701610e77565b935050602084013567ffffffffffffffff8111156110905761108f610df3565b5b61109c86828701610ff2565b92509250509250925092565b600080604083850312156110bf576110be610dee565b5b60006110cd85828601610e41565b92505060206110de85828601610e41565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061112f57607f821691505b602082108103611142576111416110e8565b5b50919050565b7f5573657220616c726561647920636c61696d656420746f6b656e730000000000600082015250565b600061117e601b83610d47565b915061118982611148565b602082019050919050565b600060208201905081810360008301526111ad81611171565b9050919050565b6111bd81610e18565b82525050565b60006040820190506111d860008301856111b4565b6111e56020830184610f02565b9392505050565b6000819050919050565b6000819050919050565b61121161120c826111ec565b6111f6565b82525050565b60006112238284611200565b60208201915081905092915050565b7f496e76616c69642070726f6f6600000000000000000000000000000000000000600082015250565b6000611268600d83610d47565b915061127382611232565b602082019050919050565b600060208201905081810360008301526112978161125b565b9050919050565b6112a781610ecc565b81146112b257600080fd5b50565b6000815190506112c48161129e565b92915050565b6000602082840312156112e0576112df610dee565b5b60006112ee848285016112b5565b91505092915050565b600060608201905061130c60008301866111b4565b6113196020830185610f02565b6113266040830184610f02565b949350505050565b600060208201905061134360008301846111b4565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061138382610e56565b915061138e83610e56565b92508282019050808211156113a6576113a5611349565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea264697066735822122013b8d04e3a5a623899a16326014522a98183cd62d0e8c2a1b03ddf3c808e2c5764736f6c63430008190033";

type TokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Token__factory extends ContractFactory {
  constructor(...args: TokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _name: PromiseOrValue<string>,
    _symbol: PromiseOrValue<string>,
    _maxSupply: PromiseOrValue<BigNumberish>,
    _rootHash: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Token> {
    return super.deploy(
      _name,
      _symbol,
      _maxSupply,
      _rootHash,
      overrides || {}
    ) as Promise<Token>;
  }
  override getDeployTransaction(
    _name: PromiseOrValue<string>,
    _symbol: PromiseOrValue<string>,
    _maxSupply: PromiseOrValue<BigNumberish>,
    _rootHash: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _name,
      _symbol,
      _maxSupply,
      _rootHash,
      overrides || {}
    );
  }
  override attach(address: string): Token {
    return super.attach(address) as Token;
  }
  override connect(signer: Signer): Token__factory {
    return super.connect(signer) as Token__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TokenInterface {
    return new utils.Interface(_abi) as TokenInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Token {
    return new Contract(address, _abi, signerOrProvider) as Token;
  }
}
