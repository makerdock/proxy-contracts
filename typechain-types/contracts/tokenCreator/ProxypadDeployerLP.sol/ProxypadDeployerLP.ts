/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface ProxypadDeployerLPInterface extends utils.Interface {
  functions: {
    "deploy(string,string,uint256,uint256,uint256,uint16,int24,int24,address)": FunctionFragment;
    "nonfungiblePositionManager()": FunctionFragment;
    "weth()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "deploy" | "nonfungiblePositionManager" | "weth"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "deploy",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "nonfungiblePositionManager",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;

  decodeFunctionResult(functionFragment: "deploy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nonfungiblePositionManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;

  events: {
    "NewToken(address,address,string,string,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewToken"): EventFragment;
}

export interface NewTokenEventObject {
  token: string;
  creator: string;
  tokenName: string;
  tokenSymbol: string;
  maxSupply: BigNumber;
}
export type NewTokenEvent = TypedEvent<
  [string, string, string, string, BigNumber],
  NewTokenEventObject
>;

export type NewTokenEventFilter = TypedEventFilter<NewTokenEvent>;

export interface ProxypadDeployerLP extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ProxypadDeployerLPInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    deploy(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _maxSupply: PromiseOrValue<BigNumberish>,
      _liquidity: PromiseOrValue<BigNumberish>,
      _backingLiquidity: PromiseOrValue<BigNumberish>,
      fee: PromiseOrValue<BigNumberish>,
      upperTick: PromiseOrValue<BigNumberish>,
      lowerTick: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    nonfungiblePositionManager(overrides?: CallOverrides): Promise<[string]>;

    weth(overrides?: CallOverrides): Promise<[string]>;
  };

  deploy(
    _name: PromiseOrValue<string>,
    _symbol: PromiseOrValue<string>,
    _maxSupply: PromiseOrValue<BigNumberish>,
    _liquidity: PromiseOrValue<BigNumberish>,
    _backingLiquidity: PromiseOrValue<BigNumberish>,
    fee: PromiseOrValue<BigNumberish>,
    upperTick: PromiseOrValue<BigNumberish>,
    lowerTick: PromiseOrValue<BigNumberish>,
    owner: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  nonfungiblePositionManager(overrides?: CallOverrides): Promise<string>;

  weth(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    deploy(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _maxSupply: PromiseOrValue<BigNumberish>,
      _liquidity: PromiseOrValue<BigNumberish>,
      _backingLiquidity: PromiseOrValue<BigNumberish>,
      fee: PromiseOrValue<BigNumberish>,
      upperTick: PromiseOrValue<BigNumberish>,
      lowerTick: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>;

    nonfungiblePositionManager(overrides?: CallOverrides): Promise<string>;

    weth(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "NewToken(address,address,string,string,uint256)"(
      token?: PromiseOrValue<string> | null,
      creator?: PromiseOrValue<string> | null,
      tokenName?: null,
      tokenSymbol?: null,
      maxSupply?: null
    ): NewTokenEventFilter;
    NewToken(
      token?: PromiseOrValue<string> | null,
      creator?: PromiseOrValue<string> | null,
      tokenName?: null,
      tokenSymbol?: null,
      maxSupply?: null
    ): NewTokenEventFilter;
  };

  estimateGas: {
    deploy(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _maxSupply: PromiseOrValue<BigNumberish>,
      _liquidity: PromiseOrValue<BigNumberish>,
      _backingLiquidity: PromiseOrValue<BigNumberish>,
      fee: PromiseOrValue<BigNumberish>,
      upperTick: PromiseOrValue<BigNumberish>,
      lowerTick: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    nonfungiblePositionManager(overrides?: CallOverrides): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    deploy(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _maxSupply: PromiseOrValue<BigNumberish>,
      _liquidity: PromiseOrValue<BigNumberish>,
      _backingLiquidity: PromiseOrValue<BigNumberish>,
      fee: PromiseOrValue<BigNumberish>,
      upperTick: PromiseOrValue<BigNumberish>,
      lowerTick: PromiseOrValue<BigNumberish>,
      owner: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    nonfungiblePositionManager(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
